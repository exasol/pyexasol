Security
==========

.. _security-changes:

Default Behavior in PyExasol
----------------------------
As Exasol constantly improves its built-in and recommended security measures, so to do
we improve the default behaviors in PyExasol. That statuses in the table refer to
the default behavior of the :func:`pyexasol.connect`.

+------------------+----------------------------------------------------------------+
| PyExasol version | Default behavior status                                        |
+==================+================================================================+
| >= 1.0.0         | Encryption with certification verification is ENABLED          |
+------------------+----------------------------------------------------------------+
| >= 0.24.0        | Encryption is ENABLED                                          |
+------------------+----------------------------------------------------------------+
| < 0.24.0         | Encryption was disabled                                        |
+------------------+----------------------------------------------------------------+

Transport Layer Security (TLS)
------------------------------

Similar to other Exasol connectors, PyExasol is compatible with using TLS cryptographic
protocol. As a part of the TLS handshake, the drivers require the SSL/TLS certificate
used by Exasol to be verified. This is the standard practice that increases the security of
connections by preventing man-in-the-middle attacks.

Please check out the following documentation links for user-friendly tutorials from Exasol:

* `An introduction to TLS <https://github.com/exasol/tutorials/blob/1.0.0/tls/doc/tls_introduction.md>`__
* `TLS at Exasol <https://github.com/exasol/tutorials/blob/1.0.0/tls/doc/tls_with_exasol.md>`__
* `TLS in UDFs tutorial <https://github.com/exasol/tutorials/blob/1.0.0/tls/doc/tls_in_udfs.md>`__

For technical articles made by Exasol relating to TLS, please see:

- `Database connection encryption at Exasol <https://exasol.my.site.com/s/article/Database-connection-encryption-at-Exasol/>`__
- `CHANGELOG: TLS for all Exasol drivers <https://exasol.my.site.com/s/article/Changelog-content-6507>`__
- `CHANGELOG: Database accepts only TLS connections <https://exasol.my.site.com/s/article/Changelog-content-16927>`__
- `Generating TLS files yourself to avoid providing a fingerprint <https://exasol.my.site.com/s/article/Generating-TLS-files-yourself-to-avoid-providing-a-fingerprint/>`__
- `TLS connection fails <https://exasol.my.site.com/s/article/TLS-connection-fails>`__

Authentication
^^^^^^^^^^^^^^

The different allowed authentication methods depend on your Exasol-specific use case:
* For on-premises and Docker-based Exasol, see `SQL Reference: CREATE USER <https://docs.exasol.com/db/latest/sql/create_user.htm>`__.
* For Exasol SAAS running in the cloud, see
`Database access management <https://docs.exasol.com/saas/administration/access_mngt/access_management.htm#Databaseaccessmanagement>`__.

TLS/SSL Certificate
^^^^^^^^^^^^^^^^^^^

A TLS/SSL certificate is used in certification verification, which is a security
mechanism that ensures the authenticity and identity of a server during encrypted
communications. When connecting to Exasol, this verification process checks whether the
server presenting itself truly is who it claims to be, preventing man-in-the-middle
attacks and ensuring secure data transmission.

How a TLS/SSL certificate is setup, depends upon your Exasol instance:

- For OpenID, the SSL certificate may depend on the database you connect to. See `CHANGELOG: Exasol OpenID Connect support <https://exasol.my.site.com/s/article/Changelog-content-9170>`_
- Exasol running on-premises uses the certificate managed by your IT-Admin.
  - Your IT admin should replace the default server certificate, as further described on
  `Exasol TLS Certificate Installation (On-premise) <https://github.com/exasol/tutorials/blob/1.0.0/tls/doc/tls_with_exasol.md?plain=1#L43>`__
  and `TLS Certificate Instructions <https://docs.exasol.com/db/latest/administration/on-premise/access_management/tls_certificate.htm>`__.

- Exasol SAAS running in the cloud uses proper certificate generated by a public certificate authority. It does not require any extra setup.
- Exasol Docker uses a self-signed SSL certificate by default. You may generate a proper SSL certificate and submit it for use via the ConfD API. More details are available on:

   - `GitHub for Exasol Docker <https://github.com/exasol/docker-db>`_
   - `ConfD API <https://docs.exasol.com/db/latest/confd/confd.htm>`_
   - `confd_client cert_update <https://docs.exasol.com/db/latest/confd/jobs/cert_update.htm>`_

Verification with PyExasol
^^^^^^^^^^^^^^^^^^^^^^^^^^
From PyExasol `1.0.0` (see :ref:`security-changes`), the default is for connections
(:func:`pyexasol.connect`) to be encrypted and made with certification verification.

<switch to use cases here and get rid of specific examples section>

To disable strict certification verification, in a development or testing
environments, set ``websocket_sslopt`` to ``{"cert_reqs": ssl.CERT_NONE}``. This is NOT
recommended for production environments, due to the associated increased security risks.

Similar to JDBC / ODBC drivers, PyExasol supports fingerprint certificate verification.
<ref section instead>
Please check the examples below.

Specific Examples
"""""""""""""""""

1) How to connect with TLS encryption:

   .. code-block:: python

      pyexasol.connect(dsn='myexasol:8563'
                       , user='user'
                       , password='password')


2) How to connect with TLS encryption and fingerprint verification:

   .. code-block:: python

      pyexasol.connect(dsn='myexasol/135a1d2dce102de866f58267521f4232153545a075dc85f8f7596f57e588a181:8563'
                       , user='user'
                       , password='password'
                       )


3) How to connect with TLS encryption and full certificate verification "on-premises" using internal root CA (certificate authority):

   .. code-block:: python

      pyexasol.connect(dsn='myexasol:8563'
                       , user='user'
                       , password='password'
                       , websocket_sslopt={
                          "cert_reqs": ssl.CERT_REQUIRED,
                          "ca_certs": '/path/to/rootCA.crt',
                       })


4) How to connect to Exasol SAAS (TLS encryption is REQUIRED for SAAS):

   .. code-block:: python

      pyexasol.connect(dsn='abc.cloud.exasol.com:8563'
                       , user='user'
                       , refresh_token='token'
                       , encryption=True
                       )

   .. code-block:: python

      pyexasol.connect(dsn='myexasol:8563'
                       , user='user'
                       , password='personal_access_token'
                       , encryption=True
                       )
